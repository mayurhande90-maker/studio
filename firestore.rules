/**
 * @fileoverview Firestore Security Rules for MagicPixa application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has full control
 * over their own data, and no other user can access it.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data.
 * - `/users/{userId}/sessions/{sessionId}`: Stores session data for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and sessions.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - No denormalization is needed because the security rules will rely on `request.auth.uid`
 * matching the `userId` field within the paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can get, update, and delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) User with ID 'user456' cannot access the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing all users

      // Allow a user to create their own profile, enforcing that the userId in the path
      // matches the authenticated user's ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to update their own profile, enforcing that the userId cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own session data.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create) User 'user123' can create a new session under their profile.
     * @allow (get, list, update, delete) User 'user123' can read, list, update, and delete their own sessions.
     * @deny (create, get, list, update, delete) User 'user456' cannot access sessions belonging to 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sessions/{sessionId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow a user to create a session under their own profile.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow a user to update their own session.  The userId must not change.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow a user to delete their own session.
      allow delete: if isExistingOwner(userId);
    }
  }
}